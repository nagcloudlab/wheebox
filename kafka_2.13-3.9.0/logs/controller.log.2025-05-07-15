[2025-05-07 15:09:19,213] INFO [ControllerEventThread controllerId=101] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2025-05-07 15:09:19,258] INFO [Controller id=101] 101 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2025-05-07 15:09:19,263] INFO [Controller id=101] Creating FeatureZNode at path: /feature with contents: FeatureZNode(2,Enabled,Map()) (kafka.controller.KafkaController)
[2025-05-07 15:09:19,318] INFO [Controller id=101] Registering handlers (kafka.controller.KafkaController)
[2025-05-07 15:09:19,323] INFO [Controller id=101] Deleting log dir event notifications (kafka.controller.KafkaController)
[2025-05-07 15:09:19,326] INFO [Controller id=101] Deleting isr change notifications (kafka.controller.KafkaController)
[2025-05-07 15:09:19,329] INFO [Controller id=101] Initializing controller context (kafka.controller.KafkaController)
[2025-05-07 15:09:19,347] INFO [Controller id=101] Initialized broker epochs cache: HashMap(101 -> 25) (kafka.controller.KafkaController)
[2025-05-07 15:09:19,354] DEBUG [Controller id=101] Register BrokerModifications handler for Set(101) (kafka.controller.KafkaController)
[2025-05-07 15:09:19,360] DEBUG [Channel manager on controller 101]: Controller 101 trying to connect to broker 101 (kafka.controller.ControllerChannelManager)
[2025-05-07 15:09:19,365] INFO [RequestSendThread controllerId=101] Starting (kafka.controller.RequestSendThread)
[2025-05-07 15:09:19,367] INFO [Controller id=101] Currently active brokers in the cluster: Set(101) (kafka.controller.KafkaController)
[2025-05-07 15:09:19,367] INFO [Controller id=101] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2025-05-07 15:09:19,367] INFO [Controller id=101] Current list of topics in the cluster: HashSet() (kafka.controller.KafkaController)
[2025-05-07 15:09:19,367] INFO [Controller id=101] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2025-05-07 15:09:19,370] INFO [Controller id=101] List of topics to be deleted:  (kafka.controller.KafkaController)
[2025-05-07 15:09:19,370] INFO [Controller id=101] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2025-05-07 15:09:19,370] INFO [Controller id=101] Initializing topic deletion manager (kafka.controller.KafkaController)
[2025-05-07 15:09:19,371] INFO [Topic Deletion Manager 101] Initializing manager with initial deletions: Set(), initial ineligible deletions: HashSet() (kafka.controller.TopicDeletionManager)
[2025-05-07 15:09:19,372] INFO [Controller id=101] Sending update metadata request (kafka.controller.KafkaController)
[2025-05-07 15:09:19,382] INFO [ReplicaStateMachine controllerId=101] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2025-05-07 15:09:19,383] INFO [ReplicaStateMachine controllerId=101] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2025-05-07 15:09:19,385] INFO [ReplicaStateMachine controllerId=101] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2025-05-07 15:09:19,386] DEBUG [ReplicaStateMachine controllerId=101] Started replica state machine with initial state -> HashMap() (kafka.controller.ZkReplicaStateMachine)
[2025-05-07 15:09:19,386] INFO [PartitionStateMachine controllerId=101] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2025-05-07 15:09:19,387] INFO [PartitionStateMachine controllerId=101] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2025-05-07 15:09:19,390] DEBUG [PartitionStateMachine controllerId=101] Started partition state machine with initial state -> HashMap() (kafka.controller.ZkPartitionStateMachine)
[2025-05-07 15:09:19,390] INFO [Controller id=101] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2025-05-07 15:09:19,394] WARN [RequestSendThread controllerId=101] Controller 101's connection to broker 192.168.2.222:9092 (id: 101 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to 192.168.2.222:9092 (id: 101 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:71)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:299)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:252)
	at org.apache.kafka.server.util.ShutdownableThread.run(ShutdownableThread.java:136)
[2025-05-07 15:09:19,398] INFO [Controller id=101] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2025-05-07 15:09:19,398] INFO [Controller id=101] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2025-05-07 15:09:19,398] INFO [Controller id=101] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2025-05-07 15:09:19,399] INFO [Controller id=101] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2025-05-07 15:09:19,401] INFO [Controller id=101] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2025-05-07 15:09:19,426] INFO [Controller id=101] Starting the controller scheduler (kafka.controller.KafkaController)
[2025-05-07 15:09:19,506] INFO [RequestSendThread controllerId=101] Controller 101 connected to 192.168.2.222:9092 (id: 101 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2025-05-07 15:09:24,431] INFO [Controller id=101] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2025-05-07 15:09:24,432] TRACE [Controller id=101] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2025-05-07 15:09:28,297] INFO [Controller id=101] Newly added brokers: 102, deleted brokers: , bounced brokers: , all live brokers: 101,102 (kafka.controller.KafkaController)
[2025-05-07 15:09:28,298] DEBUG [Channel manager on controller 101]: Controller 101 trying to connect to broker 102 (kafka.controller.ControllerChannelManager)
[2025-05-07 15:09:28,303] INFO [RequestSendThread controllerId=101] Starting (kafka.controller.RequestSendThread)
[2025-05-07 15:09:28,304] INFO [Controller id=101] New broker startup callback for 102 (kafka.controller.KafkaController)
[2025-05-07 15:09:28,310] WARN [RequestSendThread controllerId=101] Controller 101's connection to broker 192.168.2.222:9093 (id: 102 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to 192.168.2.222:9093 (id: 102 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:71)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:299)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:252)
	at org.apache.kafka.server.util.ShutdownableThread.run(ShutdownableThread.java:136)
[2025-05-07 15:09:28,310] DEBUG [Controller id=101] Register BrokerModifications handler for List(102) (kafka.controller.KafkaController)
[2025-05-07 15:09:28,313] INFO [Controller id=101] Updated broker epochs cache: HashMap(101 -> 25, 102 -> 45) (kafka.controller.KafkaController)
[2025-05-07 15:09:28,341] INFO [ControllerEventThread controllerId=102] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2025-05-07 15:09:28,358] DEBUG [Controller id=102] Broker 101 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2025-05-07 15:09:28,412] WARN [RequestSendThread controllerId=101] Controller 101's connection to broker 192.168.2.222:9093 (id: 102 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to 192.168.2.222:9093 (id: 102 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:71)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:299)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:252)
	at org.apache.kafka.server.util.ShutdownableThread.run(ShutdownableThread.java:136)
[2025-05-07 15:09:28,522] WARN [RequestSendThread controllerId=101] Controller 101's connection to broker 192.168.2.222:9093 (id: 102 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to 192.168.2.222:9093 (id: 102 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:71)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:299)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:252)
	at org.apache.kafka.server.util.ShutdownableThread.run(ShutdownableThread.java:136)
[2025-05-07 15:09:28,624] INFO [RequestSendThread controllerId=101] Controller 101 connected to 192.168.2.222:9093 (id: 102 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2025-05-07 15:09:38,863] INFO [Controller id=101] Newly added brokers: 103, deleted brokers: , bounced brokers: , all live brokers: 101,102,103 (kafka.controller.KafkaController)
[2025-05-07 15:09:38,864] DEBUG [Channel manager on controller 101]: Controller 101 trying to connect to broker 103 (kafka.controller.ControllerChannelManager)
[2025-05-07 15:09:38,866] INFO [RequestSendThread controllerId=101] Starting (kafka.controller.RequestSendThread)
[2025-05-07 15:09:38,866] INFO [Controller id=101] New broker startup callback for 103 (kafka.controller.KafkaController)
[2025-05-07 15:09:38,867] DEBUG [Controller id=101] Register BrokerModifications handler for List(103) (kafka.controller.KafkaController)
[2025-05-07 15:09:38,870] WARN [RequestSendThread controllerId=101] Controller 101's connection to broker 192.168.2.222:9094 (id: 103 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to 192.168.2.222:9094 (id: 103 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:71)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:299)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:252)
	at org.apache.kafka.server.util.ShutdownableThread.run(ShutdownableThread.java:136)
[2025-05-07 15:09:38,872] INFO [Controller id=101] Updated broker epochs cache: HashMap(101 -> 25, 102 -> 45, 103 -> 61) (kafka.controller.KafkaController)
[2025-05-07 15:09:38,913] INFO [ControllerEventThread controllerId=103] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2025-05-07 15:09:38,929] DEBUG [Controller id=103] Broker 101 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2025-05-07 15:09:38,974] WARN [RequestSendThread controllerId=101] Controller 101's connection to broker 192.168.2.222:9094 (id: 103 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to 192.168.2.222:9094 (id: 103 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:71)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:299)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:252)
	at org.apache.kafka.server.util.ShutdownableThread.run(ShutdownableThread.java:136)
[2025-05-07 15:09:39,078] INFO [RequestSendThread controllerId=101] Controller 101 connected to 192.168.2.222:9094 (id: 103 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2025-05-07 15:11:19,863] INFO [Controller id=101] New topics: [Set(topic1)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(topic1,Some(lh0bnBZySmW_7rpbLkzsJg),Map(topic1-0 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2025-05-07 15:11:19,864] INFO [Controller id=101] New partition creation callback for topic1-0 (kafka.controller.KafkaController)
[2025-05-07 15:11:52,935] INFO [Controller id=101] New topics: [Set(topic2)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(topic2,Some(Qf_F1nB9T328xTTZD0CWWg),Map(topic2-0 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), topic2-1 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2025-05-07 15:11:52,935] INFO [Controller id=101] New partition creation callback for topic2-0,topic2-1 (kafka.controller.KafkaController)
[2025-05-07 15:12:17,828] INFO [Controller id=101] New topics: [Set(topic3)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(topic3,Some(BMuouxAWQwOOGxyq2Yf32g),Map(topic3-0 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), topic3-1 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), topic3-2 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2025-05-07 15:12:17,829] INFO [Controller id=101] New partition creation callback for topic3-0,topic3-1,topic3-2 (kafka.controller.KafkaController)
[2025-05-07 15:14:24,424] INFO [Controller id=101] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2025-05-07 15:14:24,424] TRACE [Controller id=101] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2025-05-07 15:14:24,427] DEBUG [Controller id=101] Topics not in preferred replica for broker 101 HashMap() (kafka.controller.KafkaController)
[2025-05-07 15:14:24,428] TRACE [Controller id=101] Leader imbalance ratio for broker 101 is 0.0 (kafka.controller.KafkaController)
[2025-05-07 15:14:24,428] DEBUG [Controller id=101] Topics not in preferred replica for broker 102 HashMap() (kafka.controller.KafkaController)
[2025-05-07 15:14:24,429] TRACE [Controller id=101] Leader imbalance ratio for broker 102 is 0.0 (kafka.controller.KafkaController)
[2025-05-07 15:14:24,429] DEBUG [Controller id=101] Topics not in preferred replica for broker 103 HashMap() (kafka.controller.KafkaController)
[2025-05-07 15:14:24,429] TRACE [Controller id=101] Leader imbalance ratio for broker 103 is 0.0 (kafka.controller.KafkaController)
[2025-05-07 15:17:11,904] DEBUG [Controller id=101] Delete topics listener fired for topics topic1 to be deleted (kafka.controller.KafkaController)
[2025-05-07 15:17:11,904] INFO [Controller id=101] Starting topic deletion for topics topic1 (kafka.controller.KafkaController)
[2025-05-07 15:17:11,907] INFO [Topic Deletion Manager 101] Handling deletion for topics topic1 (kafka.controller.TopicDeletionManager)
[2025-05-07 15:17:11,908] INFO [Topic Deletion Manager 101] Deletion of topic topic1 (re)started (kafka.controller.TopicDeletionManager)
[2025-05-07 15:17:11,971] DEBUG [Controller id=101] Delete topics listener fired for topics topic1,topic3 to be deleted (kafka.controller.KafkaController)
[2025-05-07 15:17:11,971] INFO [Controller id=101] Starting topic deletion for topics topic1,topic3 (kafka.controller.KafkaController)
[2025-05-07 15:17:11,971] INFO [Topic Deletion Manager 101] Handling deletion for topics topic1,topic3 (kafka.controller.TopicDeletionManager)
[2025-05-07 15:17:11,971] INFO [Topic Deletion Manager 101] Deletion of topic topic3 (re)started (kafka.controller.TopicDeletionManager)
[2025-05-07 15:17:12,094] DEBUG [Controller id=101] Delete topics listener fired for topics topic1,topic2,topic3 to be deleted (kafka.controller.KafkaController)
[2025-05-07 15:17:12,094] INFO [Controller id=101] Starting topic deletion for topics topic1,topic2,topic3 (kafka.controller.KafkaController)
[2025-05-07 15:17:12,094] INFO [Topic Deletion Manager 101] Handling deletion for topics topic1,topic2,topic3 (kafka.controller.TopicDeletionManager)
[2025-05-07 15:17:12,095] INFO [Topic Deletion Manager 101] Deletion of topic topic2 (re)started (kafka.controller.TopicDeletionManager)
[2025-05-07 15:17:12,159] DEBUG [Controller id=101] Delete topic callback invoked on StopReplica response received from broker 103: request error = NONE, partition errors = Map(topic1-0 -> NONE) (kafka.controller.KafkaController)
[2025-05-07 15:17:12,161] DEBUG [Topic Deletion Manager 101] Deletion successfully completed for replicas [Topic=topic1,Partition=0,Replica=103] (kafka.controller.TopicDeletionManager)
[2025-05-07 15:17:12,162] INFO [Topic Deletion Manager 101] Handling deletion for topics topic1,topic2,topic3 (kafka.controller.TopicDeletionManager)
[2025-05-07 15:17:12,403] INFO [Topic Deletion Manager 101] Deletion of topic topic1 successfully completed (kafka.controller.TopicDeletionManager)
[2025-05-07 15:17:12,412] DEBUG [Controller id=101] Delete topic callback invoked on StopReplica response received from broker 102: request error = NONE, partition errors = Map(topic3-2 -> NONE) (kafka.controller.KafkaController)
[2025-05-07 15:17:12,413] DEBUG [Topic Deletion Manager 101] Deletion successfully completed for replicas [Topic=topic3,Partition=2,Replica=102] (kafka.controller.TopicDeletionManager)
[2025-05-07 15:17:12,413] INFO [Topic Deletion Manager 101] Handling deletion for topics topic2,topic3 (kafka.controller.TopicDeletionManager)
[2025-05-07 15:17:12,414] DEBUG [Controller id=101] Delete topic callback invoked on StopReplica response received from broker 103: request error = NONE, partition errors = Map(topic3-1 -> NONE) (kafka.controller.KafkaController)
[2025-05-07 15:17:12,414] DEBUG [Topic Deletion Manager 101] Deletion successfully completed for replicas [Topic=topic3,Partition=1,Replica=103] (kafka.controller.TopicDeletionManager)
[2025-05-07 15:17:12,415] INFO [Topic Deletion Manager 101] Handling deletion for topics topic2,topic3 (kafka.controller.TopicDeletionManager)
[2025-05-07 15:17:12,417] DEBUG [Controller id=101] Delete topic callback invoked on StopReplica response received from broker 101: request error = NONE, partition errors = Map(topic3-0 -> NONE) (kafka.controller.KafkaController)
[2025-05-07 15:17:12,422] DEBUG [Topic Deletion Manager 101] Deletion successfully completed for replicas [Topic=topic3,Partition=0,Replica=101] (kafka.controller.TopicDeletionManager)
[2025-05-07 15:17:12,422] INFO [Topic Deletion Manager 101] Handling deletion for topics topic2,topic3 (kafka.controller.TopicDeletionManager)
[2025-05-07 15:17:12,578] INFO [Topic Deletion Manager 101] Deletion of topic topic3 successfully completed (kafka.controller.TopicDeletionManager)
[2025-05-07 15:17:12,579] INFO [Controller id=101] New topics: [Set()], deleted topics: [HashSet()], new partition replica assignment [Set()] (kafka.controller.KafkaController)
[2025-05-07 15:17:12,581] DEBUG [Controller id=101] Delete topics listener fired for topics topic2 to be deleted (kafka.controller.KafkaController)
[2025-05-07 15:17:12,581] INFO [Controller id=101] Starting topic deletion for topics topic2 (kafka.controller.KafkaController)
[2025-05-07 15:17:12,581] INFO [Topic Deletion Manager 101] Handling deletion for topics topic2 (kafka.controller.TopicDeletionManager)
[2025-05-07 15:17:12,583] DEBUG [Controller id=101] Delete topic callback invoked on StopReplica response received from broker 103: request error = NONE, partition errors = Map(topic2-1 -> NONE) (kafka.controller.KafkaController)
[2025-05-07 15:17:12,583] DEBUG [Topic Deletion Manager 101] Deletion successfully completed for replicas [Topic=topic2,Partition=1,Replica=103] (kafka.controller.TopicDeletionManager)
[2025-05-07 15:17:12,583] INFO [Topic Deletion Manager 101] Handling deletion for topics topic2 (kafka.controller.TopicDeletionManager)
[2025-05-07 15:17:12,584] DEBUG [Controller id=101] Delete topic callback invoked on StopReplica response received from broker 101: request error = NONE, partition errors = Map(topic2-0 -> NONE) (kafka.controller.KafkaController)
[2025-05-07 15:17:12,584] DEBUG [Topic Deletion Manager 101] Deletion successfully completed for replicas [Topic=topic2,Partition=0,Replica=101] (kafka.controller.TopicDeletionManager)
[2025-05-07 15:17:12,584] INFO [Topic Deletion Manager 101] Handling deletion for topics topic2 (kafka.controller.TopicDeletionManager)
[2025-05-07 15:17:12,689] INFO [Topic Deletion Manager 101] Deletion of topic topic2 successfully completed (kafka.controller.TopicDeletionManager)
[2025-05-07 15:17:12,691] INFO [Controller id=101] New topics: [Set()], deleted topics: [HashSet()], new partition replica assignment [Set()] (kafka.controller.KafkaController)
[2025-05-07 15:17:12,691] DEBUG [Controller id=101] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2025-05-07 15:19:17,790] INFO [Controller id=101] New topics: [Set(wheebox)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(wheebox,Some(yibJzBnQRF2vx4Fuy14QuQ),Map(wheebox-0 -> ReplicaAssignment(replicas=102,103,101, addingReplicas=, removingReplicas=), wheebox-1 -> ReplicaAssignment(replicas=101,102,103, addingReplicas=, removingReplicas=), wheebox-2 -> ReplicaAssignment(replicas=103,101,102, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2025-05-07 15:19:17,790] INFO [Controller id=101] New partition creation callback for wheebox-0,wheebox-1,wheebox-2 (kafka.controller.KafkaController)
[2025-05-07 15:19:24,459] INFO [Controller id=101] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2025-05-07 15:19:24,459] TRACE [Controller id=101] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2025-05-07 15:19:24,459] DEBUG [Controller id=101] Topics not in preferred replica for broker 101 Map() (kafka.controller.KafkaController)
[2025-05-07 15:19:24,459] TRACE [Controller id=101] Leader imbalance ratio for broker 101 is 0.0 (kafka.controller.KafkaController)
[2025-05-07 15:19:24,459] DEBUG [Controller id=101] Topics not in preferred replica for broker 102 Map() (kafka.controller.KafkaController)
[2025-05-07 15:19:24,459] TRACE [Controller id=101] Leader imbalance ratio for broker 102 is 0.0 (kafka.controller.KafkaController)
[2025-05-07 15:19:24,460] DEBUG [Controller id=101] Topics not in preferred replica for broker 103 Map() (kafka.controller.KafkaController)
[2025-05-07 15:19:24,460] TRACE [Controller id=101] Leader imbalance ratio for broker 103 is 0.0 (kafka.controller.KafkaController)
[2025-05-07 15:24:24,452] INFO [Controller id=101] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2025-05-07 15:24:24,454] TRACE [Controller id=101] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2025-05-07 15:24:24,455] DEBUG [Controller id=101] Topics not in preferred replica for broker 101 Map() (kafka.controller.KafkaController)
[2025-05-07 15:24:24,455] TRACE [Controller id=101] Leader imbalance ratio for broker 101 is 0.0 (kafka.controller.KafkaController)
[2025-05-07 15:24:24,455] DEBUG [Controller id=101] Topics not in preferred replica for broker 102 Map() (kafka.controller.KafkaController)
[2025-05-07 15:24:24,455] TRACE [Controller id=101] Leader imbalance ratio for broker 102 is 0.0 (kafka.controller.KafkaController)
[2025-05-07 15:24:24,455] DEBUG [Controller id=101] Topics not in preferred replica for broker 103 Map() (kafka.controller.KafkaController)
[2025-05-07 15:24:24,455] TRACE [Controller id=101] Leader imbalance ratio for broker 103 is 0.0 (kafka.controller.KafkaController)
[2025-05-07 15:29:10,285] DEBUG [Controller id=101] There is no producerId block yet (Zk path version 0), creating the first block (kafka.controller.KafkaController)
[2025-05-07 15:29:10,300] INFO [Controller id=101] Acquired new producerId block ProducerIdsBlock(assignedBrokerId=101, firstProducerId=0, size=1000) by writing to Zk with path version 1 (kafka.controller.KafkaController)
[2025-05-07 15:29:10,409] DEBUG [Controller id=101] Read current producerId block ProducerIdsBlock(assignedBrokerId=101, firstProducerId=0, size=1000), Zk path version 1 (kafka.controller.KafkaController)
[2025-05-07 15:29:10,425] INFO [Controller id=101] Acquired new producerId block ProducerIdsBlock(assignedBrokerId=102, firstProducerId=1000, size=1000) by writing to Zk with path version 2 (kafka.controller.KafkaController)
[2025-05-07 15:29:24,448] INFO [Controller id=101] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2025-05-07 15:29:24,448] TRACE [Controller id=101] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2025-05-07 15:29:24,449] DEBUG [Controller id=101] Topics not in preferred replica for broker 101 Map() (kafka.controller.KafkaController)
[2025-05-07 15:29:24,449] TRACE [Controller id=101] Leader imbalance ratio for broker 101 is 0.0 (kafka.controller.KafkaController)
[2025-05-07 15:29:24,449] DEBUG [Controller id=101] Topics not in preferred replica for broker 102 Map() (kafka.controller.KafkaController)
[2025-05-07 15:29:24,449] TRACE [Controller id=101] Leader imbalance ratio for broker 102 is 0.0 (kafka.controller.KafkaController)
[2025-05-07 15:29:24,449] DEBUG [Controller id=101] Topics not in preferred replica for broker 103 Map() (kafka.controller.KafkaController)
[2025-05-07 15:29:24,449] TRACE [Controller id=101] Leader imbalance ratio for broker 103 is 0.0 (kafka.controller.KafkaController)
[2025-05-07 15:34:24,499] INFO [Controller id=101] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2025-05-07 15:34:24,499] TRACE [Controller id=101] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2025-05-07 15:34:24,499] DEBUG [Controller id=101] Topics not in preferred replica for broker 101 Map() (kafka.controller.KafkaController)
[2025-05-07 15:34:24,499] TRACE [Controller id=101] Leader imbalance ratio for broker 101 is 0.0 (kafka.controller.KafkaController)
[2025-05-07 15:34:24,499] DEBUG [Controller id=101] Topics not in preferred replica for broker 102 Map() (kafka.controller.KafkaController)
[2025-05-07 15:34:24,499] TRACE [Controller id=101] Leader imbalance ratio for broker 102 is 0.0 (kafka.controller.KafkaController)
[2025-05-07 15:34:24,499] DEBUG [Controller id=101] Topics not in preferred replica for broker 103 Map() (kafka.controller.KafkaController)
[2025-05-07 15:34:24,499] TRACE [Controller id=101] Leader imbalance ratio for broker 103 is 0.0 (kafka.controller.KafkaController)
[2025-05-07 15:39:24,497] INFO [Controller id=101] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2025-05-07 15:39:24,499] TRACE [Controller id=101] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2025-05-07 15:39:24,501] DEBUG [Controller id=101] Topics not in preferred replica for broker 101 Map() (kafka.controller.KafkaController)
[2025-05-07 15:39:24,501] TRACE [Controller id=101] Leader imbalance ratio for broker 101 is 0.0 (kafka.controller.KafkaController)
[2025-05-07 15:39:24,501] DEBUG [Controller id=101] Topics not in preferred replica for broker 102 Map() (kafka.controller.KafkaController)
[2025-05-07 15:39:24,501] TRACE [Controller id=101] Leader imbalance ratio for broker 102 is 0.0 (kafka.controller.KafkaController)
[2025-05-07 15:39:24,501] DEBUG [Controller id=101] Topics not in preferred replica for broker 103 Map() (kafka.controller.KafkaController)
[2025-05-07 15:39:24,501] TRACE [Controller id=101] Leader imbalance ratio for broker 103 is 0.0 (kafka.controller.KafkaController)
[2025-05-07 15:41:04,566] INFO [Controller id=101] New topics: [Set(ets)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(ets,Some(qIWBZm6eQiqoWOjRiy3SGw),Map(ets-0 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2025-05-07 15:41:04,566] INFO [Controller id=101] New partition creation callback for ets-0 (kafka.controller.KafkaController)
[2025-05-07 15:41:04,607] INFO [RequestSendThread controllerId=101] Controller 101 connected to 192.168.2.222:9094 (id: 103 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2025-05-07 15:41:04,607] INFO [RequestSendThread controllerId=101] Controller 101 connected to 192.168.2.222:9093 (id: 102 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2025-05-07 15:41:04,607] INFO [RequestSendThread controllerId=101] Controller 101 connected to 192.168.2.222:9092 (id: 101 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2025-05-07 15:44:24,497] INFO [Controller id=101] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2025-05-07 15:44:24,500] TRACE [Controller id=101] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2025-05-07 15:44:24,501] DEBUG [Controller id=101] Topics not in preferred replica for broker 101 Map() (kafka.controller.KafkaController)
[2025-05-07 15:44:24,501] TRACE [Controller id=101] Leader imbalance ratio for broker 101 is 0.0 (kafka.controller.KafkaController)
[2025-05-07 15:44:24,501] DEBUG [Controller id=101] Topics not in preferred replica for broker 102 Map() (kafka.controller.KafkaController)
[2025-05-07 15:44:24,501] TRACE [Controller id=101] Leader imbalance ratio for broker 102 is 0.0 (kafka.controller.KafkaController)
[2025-05-07 15:44:24,501] DEBUG [Controller id=101] Topics not in preferred replica for broker 103 Map() (kafka.controller.KafkaController)
[2025-05-07 15:44:24,501] TRACE [Controller id=101] Leader imbalance ratio for broker 103 is 0.0 (kafka.controller.KafkaController)
[2025-05-07 15:49:24,495] INFO [Controller id=101] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2025-05-07 15:49:24,495] TRACE [Controller id=101] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2025-05-07 15:49:24,495] DEBUG [Controller id=101] Topics not in preferred replica for broker 101 Map() (kafka.controller.KafkaController)
[2025-05-07 15:49:24,495] TRACE [Controller id=101] Leader imbalance ratio for broker 101 is 0.0 (kafka.controller.KafkaController)
[2025-05-07 15:49:24,495] DEBUG [Controller id=101] Topics not in preferred replica for broker 102 Map() (kafka.controller.KafkaController)
[2025-05-07 15:49:24,495] TRACE [Controller id=101] Leader imbalance ratio for broker 102 is 0.0 (kafka.controller.KafkaController)
[2025-05-07 15:49:24,495] DEBUG [Controller id=101] Topics not in preferred replica for broker 103 Map() (kafka.controller.KafkaController)
[2025-05-07 15:49:24,495] TRACE [Controller id=101] Leader imbalance ratio for broker 103 is 0.0 (kafka.controller.KafkaController)
[2025-05-07 15:54:24,491] INFO [Controller id=101] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2025-05-07 15:54:24,493] TRACE [Controller id=101] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2025-05-07 15:54:24,493] DEBUG [Controller id=101] Topics not in preferred replica for broker 101 Map() (kafka.controller.KafkaController)
[2025-05-07 15:54:24,493] TRACE [Controller id=101] Leader imbalance ratio for broker 101 is 0.0 (kafka.controller.KafkaController)
[2025-05-07 15:54:24,493] DEBUG [Controller id=101] Topics not in preferred replica for broker 102 Map() (kafka.controller.KafkaController)
[2025-05-07 15:54:24,493] TRACE [Controller id=101] Leader imbalance ratio for broker 102 is 0.0 (kafka.controller.KafkaController)
[2025-05-07 15:54:24,493] DEBUG [Controller id=101] Topics not in preferred replica for broker 103 Map() (kafka.controller.KafkaController)
[2025-05-07 15:54:24,493] TRACE [Controller id=101] Leader imbalance ratio for broker 103 is 0.0 (kafka.controller.KafkaController)
[2025-05-07 15:54:43,701] INFO [Controller id=101] New topics: [Set(__consumer_offsets)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(__consumer_offsets,Some(QVDdAfeaRJqTnm6GwBImyw),HashMap(__consumer_offsets-22 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-30 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-25 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-35 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-37 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-38 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-13 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-8 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-21 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-4 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-27 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-7 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-9 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-46 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-41 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-33 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-23 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-49 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-47 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-16 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-28 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-31 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-36 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-42 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-3 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-18 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-15 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-24 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-17 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-48 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-19 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-11 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-2 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-43 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-6 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-14 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-20 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-0 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-44 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-39 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-12 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-45 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-1 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-5 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-26 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-29 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-34 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-10 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-32 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-40 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2025-05-07 15:54:43,704] INFO [Controller id=101] New partition creation callback for __consumer_offsets-22,__consumer_offsets-30,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-37,__consumer_offsets-38,__consumer_offsets-13,__consumer_offsets-8,__consumer_offsets-21,__consumer_offsets-4,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-46,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,__consumer_offsets-47,__consumer_offsets-16,__consumer_offsets-28,__consumer_offsets-31,__consumer_offsets-36,__consumer_offsets-42,__consumer_offsets-3,__consumer_offsets-18,__consumer_offsets-15,__consumer_offsets-24,__consumer_offsets-17,__consumer_offsets-48,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-2,__consumer_offsets-43,__consumer_offsets-6,__consumer_offsets-14,__consumer_offsets-20,__consumer_offsets-0,__consumer_offsets-44,__consumer_offsets-39,__consumer_offsets-12,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-26,__consumer_offsets-29,__consumer_offsets-34,__consumer_offsets-10,__consumer_offsets-32,__consumer_offsets-40 (kafka.controller.KafkaController)
[2025-05-07 15:54:44,027] INFO [RequestSendThread controllerId=101] Controller 101 connected to 192.168.2.222:9092 (id: 101 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2025-05-07 15:54:44,027] INFO [RequestSendThread controllerId=101] Controller 101 connected to 192.168.2.222:9093 (id: 102 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2025-05-07 15:54:44,027] INFO [RequestSendThread controllerId=101] Controller 101 connected to 192.168.2.222:9094 (id: 103 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2025-05-07 15:59:24,490] INFO [Controller id=101] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2025-05-07 15:59:24,492] TRACE [Controller id=101] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2025-05-07 15:59:24,493] DEBUG [Controller id=101] Topics not in preferred replica for broker 101 HashMap() (kafka.controller.KafkaController)
[2025-05-07 15:59:24,493] TRACE [Controller id=101] Leader imbalance ratio for broker 101 is 0.0 (kafka.controller.KafkaController)
[2025-05-07 15:59:24,493] DEBUG [Controller id=101] Topics not in preferred replica for broker 102 HashMap() (kafka.controller.KafkaController)
[2025-05-07 15:59:24,493] TRACE [Controller id=101] Leader imbalance ratio for broker 102 is 0.0 (kafka.controller.KafkaController)
[2025-05-07 15:59:24,493] DEBUG [Controller id=101] Topics not in preferred replica for broker 103 HashMap() (kafka.controller.KafkaController)
[2025-05-07 15:59:24,493] TRACE [Controller id=101] Leader imbalance ratio for broker 103 is 0.0 (kafka.controller.KafkaController)
